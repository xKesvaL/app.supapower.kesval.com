rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin';
    }
      
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId
    }

    function isValidUser(userId) {
      let username = request.resource.data.username;
      let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
      
      return isOwner(userId) && createdValidUsername;
    }

    function isValidUsername(username) {
      let isOwner = request.auth.uid == request.resource.data.uid;
      let isValidLength = username.size() >= 3 && username.size() <= 24;
      let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      return isOwner && isValidLength && isValidUserDoc;     
    }

    match /users/{userId} {
      allow read;
      allow create: 
        if isValidUser(userId);
      allow update:
        if 
        (
          isSignedIn() && 
          isOwner(userId) &&
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['type', 'uid'])
        )
        ||
        (
          isAdmin()
        )
    }

    match /usernames/{username} {
      allow read;
      allow create: if isValidUsername(username);
    }


    match /{document=**} {
      // TEST MODE

      allow read, write: if request.time < timestamp.date(2023, 11, 25);
    }
  }
}